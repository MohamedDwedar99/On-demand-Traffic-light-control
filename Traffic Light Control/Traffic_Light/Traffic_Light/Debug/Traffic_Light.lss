
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000924  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001776  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b83  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd1  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087d  00000000  00000000  000048db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_1>
   8:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_2>
   c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  74:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app>:
u32 x = 0;
u8 volatile B_Case = 0;

u8 app(void)
{
	switch (B_Case)
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	59 f0       	breq	.+22     	; 0x9a <app+0x1e>
  84:	28 f0       	brcs	.+10     	; 0x90 <app+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	d1 f0       	breq	.+52     	; 0xbe <app+0x42>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	e9 f0       	breq	.+58     	; 0xc8 <app+0x4c>
  8e:	40 c0       	rjmp	.+128    	; 0x110 <app+0x94>
	{
		case Car_Cross:
			PED_StopMode();
  90:	0e 94 fe 03 	call	0x7fc	; 0x7fc <PED_StopMode>
			TRAF_CrossMode();
  94:	0e 94 20 04 	call	0x840	; 0x840 <TRAF_CrossMode>
			break;
  98:	28 c0       	rjmp	.+80     	; 0xea <app+0x6e>
		case Car_trans:
			if (time_sec%2 != 1)
  9a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_sec>
  9e:	80 fd       	sbrc	r24, 0
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <app+0x34>
			{
				PED_TransientMode(1);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PED_TransientMode>
				TRAF_TransientMode(1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 31 04 	call	0x862	; 0x862 <TRAF_TransientMode>
  ae:	1d c0       	rjmp	.+58     	; 0xea <app+0x6e>
			}
			else
			{
				PED_TransientMode(0);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PED_TransientMode>
				TRAF_TransientMode(0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 31 04 	call	0x862	; 0x862 <TRAF_TransientMode>
  bc:	16 c0       	rjmp	.+44     	; 0xea <app+0x6e>
			}
			break;
			case Car_Stop:
				PED_CrossMode();
  be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <PED_CrossMode>
				TRAF_StopMode();
  c2:	0e 94 45 04 	call	0x88a	; 0x88a <TRAF_StopMode>
				break;
  c6:	11 c0       	rjmp	.+34     	; 0xea <app+0x6e>
			case Ped_trans:
				if (time_sec%2 != 1)
  c8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_sec>
  cc:	80 fd       	sbrc	r24, 0
  ce:	07 c0       	rjmp	.+14     	; 0xde <app+0x62>
				{
					PED_TransientMode(1);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PED_TransientMode>
					TRAF_TransientMode(1);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 31 04 	call	0x862	; 0x862 <TRAF_TransientMode>
  dc:	06 c0       	rjmp	.+12     	; 0xea <app+0x6e>
				}
				else
				{
					PED_TransientMode(0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <PED_TransientMode>
					TRAF_TransientMode(0);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 31 04 	call	0x862	; 0x862 <TRAF_TransientMode>
				}
			break;
			default: return APP_Error;
		}
		if (time_sec >= 5)
  ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_sec>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	88 f0       	brcs	.+34     	; 0x114 <app+0x98>
		{
			time_sec = 0;
  f2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <time_sec>
			B_Case++;
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (B_Case == 4)
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	41 f4       	brne	.+16     	; 0x118 <app+0x9c>
			{
				B_Case = 0;
 108:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		return APP_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
				{
					PED_TransientMode(0);
					TRAF_TransientMode(0);
				}
			break;
			default: return APP_Error;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret
			if (B_Case == 4)
			{
				B_Case = 0;
			}
		}
		return APP_OK;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
}
 11a:	08 95       	ret

0000011c <Time_Sec>:

u8 Time_Sec(void)
{
	x++;
 11c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <x>
 120:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <x+0x1>
 124:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <x+0x2>
 128:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <x+0x3>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	a1 1d       	adc	r26, r1
 130:	b1 1d       	adc	r27, r1
 132:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
 136:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <x+0x1>
 13a:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <x+0x2>
 13e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <x+0x3>
	if (x ==3906)
 142:	82 34       	cpi	r24, 0x42	; 66
 144:	9f 40       	sbci	r25, 0x0F	; 15
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	79 f4       	brne	.+30     	; 0x16a <Time_Sec+0x4e>
	{
		time_sec++;
 14c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <time_sec>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <time_sec>
		x = 0;
 156:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <x>
 15a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <x+0x1>
 15e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <x+0x2>
 162:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <x+0x3>
		return APP_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
	}
	return TimeSecError;
 16a:	82 e0       	ldi	r24, 0x02	; 2
}
 16c:	08 95       	ret

0000016e <Bottom_Tap>:

u8 Bottom_Tap(void)
{
	switch (B_Case)
 16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	88 23       	and	r24, r24
 174:	21 f0       	breq	.+8      	; 0x17e <Bottom_Tap+0x10>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	30 f0       	brcs	.+12     	; 0x186 <Bottom_Tap+0x18>
	{
		case Car_Cross:B_Case = 1;break;
		case Car_trans:break; //do nothing
		case Car_Stop:break;	//do nothing
		default: return Bottom_TapError;
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	08 95       	ret

u8 Bottom_Tap(void)
{
	switch (B_Case)
	{
		case Car_Cross:B_Case = 1;break;
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 184:	08 95       	ret
		case Car_trans:break; //do nothing
		case Car_Stop:break;	//do nothing
		default: return Bottom_TapError;
	}
	return Bottom_OK;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret

0000018a <main>:
#include "Service/Traffic/Traffic_Interface.h"
#include "APP/app.h"

void main (void)
{
		PED_Init();
 18a:	0e 94 c8 03 	call	0x790	; 0x790 <PED_Init>
		TRAF_Init();
 18e:	0e 94 0f 04 	call	0x81e	; 0x81e <TRAF_Init>
		Bottom_Init();
 192:	0e 94 bc 03 	call	0x778	; 0x778 <Bottom_Init>
		Time_Init();
 196:	0e 94 83 03 	call	0x706	; 0x706 <Time_Init>
		EXTI_INIT(INT0,FALLING);
 19a:	64 e0       	ldi	r22, 0x04	; 4
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 75 02 	call	0x4ea	; 0x4ea <EXTI_INIT>
		GInterrupt_Enable();
 1a2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <GInterrupt_Enable>
		SetTime(Time_Sec);
 1a6:	8e e8       	ldi	r24, 0x8E	; 142
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 b2 03 	call	0x764	; 0x764 <SetTime>
		EXTI0_SetCallBack(Bottom_Tap);
 1ae:	87 eb       	ldi	r24, 0xB7	; 183
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 3e 03 	call	0x67c	; 0x67c <EXTI0_SetCallBack>
		while(1)
		{
			app();
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <app>
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <main+0x2c>

000001bc <DIO_SetPinDirection>:
	return u8Valuecopy;

}
u8 DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinDirCopy)
{
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_SetPinDirection+0x6>
 1c0:	81 c0       	rjmp	.+258    	; 0x2c4 <DIO_SetPinDirection+0x108>
 1c2:	68 30       	cpi	r22, 0x08	; 8
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_SetPinDirection+0xc>
 1c6:	80 c0       	rjmp	.+256    	; 0x2c8 <DIO_SetPinDirection+0x10c>
	{
		if ( u8PinDirCopy == PIN_OUTPUT )
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	d9 f5       	brne	.+118    	; 0x242 <DIO_SetPinDirection+0x86>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <DIO_SetPinDirection+0x38>
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <DIO_SetPinDirection+0x20>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	d9 f0       	breq	.+54     	; 0x20c <DIO_SetPinDirection+0x50>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	29 f1       	breq	.+74     	; 0x224 <DIO_SetPinDirection+0x68>
 1da:	30 c0       	rjmp	.+96     	; 0x23c <DIO_SetPinDirection+0x80>
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 1dc:	2a b3       	in	r18, 0x1a	; 26
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0x2c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0x28>
 1ec:	82 2b       	or	r24, r18
 1ee:	8a bb       	out	0x1a, r24	; 26
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		if ( u8PinDirCopy == PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 1f2:	08 95       	ret
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 1f4:	27 b3       	in	r18, 0x17	; 23
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPinDirection+0x44>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPinDirection+0x40>
 204:	82 2b       	or	r24, r18
 206:	87 bb       	out	0x17, r24	; 23
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 208:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 20a:	08 95       	ret
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 20c:	24 b3       	in	r18, 0x14	; 20
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinDirection+0x5c>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinDirection+0x58>
 21c:	82 2b       	or	r24, r18
 21e:	84 bb       	out	0x14, r24	; 20
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 220:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 222:	08 95       	ret
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 224:	21 b3       	in	r18, 0x11	; 17
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPinDirection+0x74>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPinDirection+0x70>
 234:	82 2b       	or	r24, r18
 236:	81 bb       	out	0x11, r24	; 17
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
			switch (u8PortIdCopy)
			{
				case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
				case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
				case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 23a:	08 95       	ret
				default : return DIO_SetPinDirection; break;
 23c:	8e ed       	ldi	r24, 0xDE	; 222
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 95       	ret
			}
		}

		else if ( u8PinDirCopy == PIN_INPUT )
 242:	41 11       	cpse	r20, r1
 244:	43 c0       	rjmp	.+134    	; 0x2cc <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	99 f0       	breq	.+38     	; 0x270 <DIO_SetPinDirection+0xb4>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_SetPinDirection+0x9a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	e9 f0       	breq	.+58     	; 0x28a <DIO_SetPinDirection+0xce>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	41 f1       	breq	.+80     	; 0x2a4 <DIO_SetPinDirection+0xe8>
 254:	34 c0       	rjmp	.+104    	; 0x2be <DIO_SetPinDirection+0x102>
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 256:	2a b3       	in	r18, 0x1a	; 26
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinDirection+0xa6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinDirection+0xa2>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	8a bb       	out	0x1a, r24	; 26
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
		else if ( u8PinDirCopy == PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 26e:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 270:	27 b3       	in	r18, 0x17	; 23
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0xc0>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0xbc>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	87 bb       	out	0x17, r24	; 23
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 286:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 288:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 28a:	24 b3       	in	r18, 0x14	; 20
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_SetPinDirection+0xda>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_SetPinDirection+0xd6>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	84 bb       	out	0x14, r24	; 20
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 2a2:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 2a4:	21 b3       	in	r18, 0x11	; 17
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinDirection+0xf4>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinDirection+0xf0>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	81 bb       	out	0x11, r24	; 17
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
				case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 2bc:	08 95       	ret
				default : return DIO_SetPinDirection; break;
 2be:	8e ed       	ldi	r24, 0xDE	; 222
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	08 95       	ret
		else
		{
			return DIO_SetPinDirError;
		}
	}
	return DIO_OK;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
			}
		}

		else
		{
			return DIO_SetPinDirError;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return DIO_OK;
}
 2ce:	08 95       	ret

000002d0 <DIO_SetPinValue>:
#include "../../Service/STD/STD.h"
#include "DIO_Interface.h"

u8 DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinValCopy)
{
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_SetPinValue+0x6>
 2d4:	77 c0       	rjmp	.+238    	; 0x3c4 <DIO_SetPinValue+0xf4>
 2d6:	68 30       	cpi	r22, 0x08	; 8
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <DIO_SetPinValue+0xc>
 2da:	74 c0       	rjmp	.+232    	; 0x3c4 <DIO_SetPinValue+0xf4>
	{
		if ( u8PinValCopy == PIN_HIGH )
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	a1 f5       	brne	.+104    	; 0x348 <DIO_SetPinValue+0x78>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	89 f0       	breq	.+34     	; 0x306 <DIO_SetPinValue+0x36>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <DIO_SetPinValue+0x20>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	c9 f0       	breq	.+50     	; 0x31c <DIO_SetPinValue+0x4c>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	11 f1       	breq	.+68     	; 0x332 <DIO_SetPinValue+0x62>
 2ee:	6b c0       	rjmp	.+214    	; 0x3c6 <DIO_SetPinValue+0xf6>
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
 2f0:	2b b3       	in	r18, 0x1b	; 27
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPinValue+0x2c>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPinValue+0x28>
 300:	82 2b       	or	r24, r18
 302:	8b bb       	out	0x1b, r24	; 27
 304:	5f c0       	rjmp	.+190    	; 0x3c4 <DIO_SetPinValue+0xf4>
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
 306:	28 b3       	in	r18, 0x18	; 24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPinValue+0x42>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPinValue+0x3e>
 316:	82 2b       	or	r24, r18
 318:	88 bb       	out	0x18, r24	; 24
 31a:	54 c0       	rjmp	.+168    	; 0x3c4 <DIO_SetPinValue+0xf4>
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
 31c:	25 b3       	in	r18, 0x15	; 21
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPinValue+0x58>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPinValue+0x54>
 32c:	82 2b       	or	r24, r18
 32e:	85 bb       	out	0x15, r24	; 21
 330:	49 c0       	rjmp	.+146    	; 0x3c4 <DIO_SetPinValue+0xf4>
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
 332:	22 b3       	in	r18, 0x12	; 18
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_SetPinValue+0x6e>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_SetPinValue+0x6a>
 342:	82 2b       	or	r24, r18
 344:	82 bb       	out	0x12, r24	; 18
 346:	3e c0       	rjmp	.+124    	; 0x3c4 <DIO_SetPinValue+0xf4>
				default : return DIO_SetPinValError; break;
			}
		}

		else if ( u8PinValCopy == PIN_LOW )
 348:	41 11       	cpse	r20, r1
 34a:	3f c0       	rjmp	.+126    	; 0x3ca <DIO_SetPinValue+0xfa>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	99 f0       	breq	.+38     	; 0x376 <DIO_SetPinValue+0xa6>
 350:	28 f0       	brcs	.+10     	; 0x35c <DIO_SetPinValue+0x8c>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	e9 f0       	breq	.+58     	; 0x390 <DIO_SetPinValue+0xc0>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	41 f1       	breq	.+80     	; 0x3aa <DIO_SetPinValue+0xda>
 35a:	39 c0       	rjmp	.+114    	; 0x3ce <DIO_SetPinValue+0xfe>
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 35c:	2b b3       	in	r18, 0x1b	; 27
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinValue+0x98>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinValue+0x94>
 36c:	80 95       	com	r24
 36e:	82 23       	and	r24, r18
 370:	8b bb       	out	0x1b, r24	; 27
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
				default : return DIO_SetPinValError; break;
			}
		return DIO_OK;
 372:	80 e0       	ldi	r24, 0x00	; 0
		else if ( u8PinValCopy == PIN_LOW )
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 374:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 376:	28 b3       	in	r18, 0x18	; 24
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_SetPinValue+0xb2>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_SetPinValue+0xae>
 386:	80 95       	com	r24
 388:	82 23       	and	r24, r18
 38a:	88 bb       	out	0x18, r24	; 24
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
				default : return DIO_SetPinValError; break;
			}
		return DIO_OK;
 38c:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 38e:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 390:	25 b3       	in	r18, 0x15	; 21
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_SetPinValue+0xcc>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_SetPinValue+0xc8>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	85 bb       	out	0x15, r24	; 21
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
				default : return DIO_SetPinValError; break;
			}
		return DIO_OK;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 3a8:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinValue+0xe6>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinValue+0xe2>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
				default : return DIO_SetPinValError; break;
			}
		return DIO_OK;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
			switch (u8PortIdCopy)
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 3c2:	08 95       	ret
		{
			return DIO_SetPinValError;
		}
	}

}
 3c4:	08 95       	ret
			{
				case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
				case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
				case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
				case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
				default : return DIO_SetPinValError; break;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	08 95       	ret
			}
		return DIO_OK;
		}
		else
		{
			return DIO_SetPinValError;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	08 95       	ret
			{
				case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
				case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
				case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
				case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
				default : return DIO_SetPinValError; break;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
		{
			return DIO_SetPinValError;
		}
	}

}
 3d0:	08 95       	ret

000003d2 <GInterrupt_Enable>:
#include "../../Service/STD/STD.h"
#include "GInterrupt_Interface.h"

u8 GInterrupt_Enable(void)
{
	SET_BIT(SREG,Global);
 3d2:	8f b7       	in	r24, 0x3f	; 63
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	8f bf       	out	0x3f, r24	; 63
	return ok;
}
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret

000003dc <EXTI_Enable>:
	}
	return EXTI_INIT_Error;
}
u8 EXTI_Enable(u8 INT_COPY)
{
	switch (INT_COPY)
 3dc:	86 30       	cpi	r24, 0x06	; 6
 3de:	29 f0       	breq	.+10     	; 0x3ea <EXTI_Enable+0xe>
 3e0:	87 30       	cpi	r24, 0x07	; 7
 3e2:	41 f0       	breq	.+16     	; 0x3f4 <EXTI_Enable+0x18>
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	81 f4       	brne	.+32     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e8:	0a c0       	rjmp	.+20     	; 0x3fe <EXTI_Enable+0x22>
	{
		case INT0:
		SET_BIT(GICR_Register,INT0);
 3ea:	8b b7       	in	r24, 0x3b	; 59
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8b bf       	out	0x3b, r24	; 59
		return EXTI_OK;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
		break;
		case INT1:
		SET_BIT(GICR_Register,INT1);
 3f4:	8b b7       	in	r24, 0x3b	; 59
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	8b bf       	out	0x3b, r24	; 59
		return EXTI_OK;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
		break;
		case INT2:
		SET_BIT(GICR_Register,INT2);
 3fe:	8b b7       	in	r24, 0x3b	; 59
 400:	80 62       	ori	r24, 0x20	; 32
 402:	8b bf       	out	0x3b, r24	; 59
		return EXTI_OK;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
		break;
	}
	return EXTI_EnableError;
 408:	82 e0       	ldi	r24, 0x02	; 2
}
 40a:	08 95       	ret

0000040c <EXTI_SENSE>:
u8 EXTI_SENSE(u8 INT_COPY,u8 MODE_COPY)
{
	switch (INT_COPY)
 40c:	86 30       	cpi	r24, 0x06	; 6
 40e:	31 f0       	breq	.+12     	; 0x41c <EXTI_SENSE+0x10>
 410:	87 30       	cpi	r24, 0x07	; 7
 412:	61 f1       	breq	.+88     	; 0x46c <EXTI_SENSE+0x60>
 414:	85 30       	cpi	r24, 0x05	; 5
 416:	09 f0       	breq	.+2      	; 0x41a <EXTI_SENSE+0xe>
 418:	60 c0       	rjmp	.+192    	; 0x4da <EXTI_SENSE+0xce>
 41a:	50 c0       	rjmp	.+160    	; 0x4bc <EXTI_SENSE+0xb0>
	{
		case INT0:
		switch (MODE_COPY)
 41c:	61 30       	cpi	r22, 0x01	; 1
 41e:	71 f0       	breq	.+28     	; 0x43c <EXTI_SENSE+0x30>
 420:	28 f0       	brcs	.+10     	; 0x42c <EXTI_SENSE+0x20>
 422:	62 30       	cpi	r22, 0x02	; 2
 424:	d9 f0       	breq	.+54     	; 0x45c <EXTI_SENSE+0x50>
 426:	64 30       	cpi	r22, 0x04	; 4
 428:	89 f0       	breq	.+34     	; 0x44c <EXTI_SENSE+0x40>
 42a:	59 c0       	rjmp	.+178    	; 0x4de <EXTI_SENSE+0xd2>
		{
			case LOW:
			CLR_BIT(MCUCR_Register,ISC00);
 42c:	85 b7       	in	r24, 0x35	; 53
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_Register,ISC01);
 432:	85 b7       	in	r24, 0x35	; 53
 434:	8d 7f       	andi	r24, 0xFD	; 253
 436:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
			break;
			case CHANGE:
			SET_BIT(MCUCR_Register,ISC00);
 43c:	85 b7       	in	r24, 0x35	; 53
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_Register,ISC01);
 442:	85 b7       	in	r24, 0x35	; 53
 444:	8d 7f       	andi	r24, 0xFD	; 253
 446:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
			break;
			case FALLING:
			CLR_BIT(MCUCR_Register,ISC00);
 44c:	85 b7       	in	r24, 0x35	; 53
 44e:	8e 7f       	andi	r24, 0xFE	; 254
 450:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_Register,ISC01);
 452:	85 b7       	in	r24, 0x35	; 53
 454:	82 60       	ori	r24, 0x02	; 2
 456:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
			break;
			case RISING:
			SET_BIT(MCUCR_Register,ISC00);
 45c:	85 b7       	in	r24, 0x35	; 53
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_Register,ISC01);
 462:	85 b7       	in	r24, 0x35	; 53
 464:	82 60       	ori	r24, 0x02	; 2
 466:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
			break;
		}
		return EXTI_SENSEError;
		break;
		case INT1:
		switch (MODE_COPY)
 46c:	61 30       	cpi	r22, 0x01	; 1
 46e:	71 f0       	breq	.+28     	; 0x48c <EXTI_SENSE+0x80>
 470:	28 f0       	brcs	.+10     	; 0x47c <EXTI_SENSE+0x70>
 472:	62 30       	cpi	r22, 0x02	; 2
 474:	d9 f0       	breq	.+54     	; 0x4ac <EXTI_SENSE+0xa0>
 476:	64 30       	cpi	r22, 0x04	; 4
 478:	89 f0       	breq	.+34     	; 0x49c <EXTI_SENSE+0x90>
 47a:	33 c0       	rjmp	.+102    	; 0x4e2 <EXTI_SENSE+0xd6>
		{
			case LOW:
			CLR_BIT(MCUCR_Register,ISC10);
 47c:	85 b7       	in	r24, 0x35	; 53
 47e:	8b 7f       	andi	r24, 0xFB	; 251
 480:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_Register,ISC11);
 482:	85 b7       	in	r24, 0x35	; 53
 484:	87 7f       	andi	r24, 0xF7	; 247
 486:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
			break;
			case CHANGE:
			SET_BIT(MCUCR_Register,ISC10);
 48c:	85 b7       	in	r24, 0x35	; 53
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_Register,ISC11);
 492:	85 b7       	in	r24, 0x35	; 53
 494:	87 7f       	andi	r24, 0xF7	; 247
 496:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
			break;
			case FALLING:
			CLR_BIT(MCUCR_Register,ISC10);
 49c:	85 b7       	in	r24, 0x35	; 53
 49e:	8b 7f       	andi	r24, 0xFB	; 251
 4a0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_Register,ISC11);
 4a2:	85 b7       	in	r24, 0x35	; 53
 4a4:	88 60       	ori	r24, 0x08	; 8
 4a6:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	08 95       	ret
			break;
			case RISING:
			SET_BIT(MCUCR_Register,ISC10);
 4ac:	85 b7       	in	r24, 0x35	; 53
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_Register,ISC11);
 4b2:	85 b7       	in	r24, 0x35	; 53
 4b4:	88 60       	ori	r24, 0x08	; 8
 4b6:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
			break;
		}
		return EXTI_SENSEError;
		break;
		case INT2:
		switch (MODE_COPY)
 4bc:	62 30       	cpi	r22, 0x02	; 2
 4be:	19 f0       	breq	.+6      	; 0x4c6 <EXTI_SENSE+0xba>
 4c0:	64 30       	cpi	r22, 0x04	; 4
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <EXTI_SENSE+0xc4>
 4c4:	10 c0       	rjmp	.+32     	; 0x4e6 <EXTI_SENSE+0xda>
		{
			case RISING:
			SET_BIT(MCUCR_Register,ISC2);
 4c6:	85 b7       	in	r24, 0x35	; 53
 4c8:	80 64       	ori	r24, 0x40	; 64
 4ca:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
			break;
			case FALLING:
			CLR_BIT(MCUCR_Register,ISC2);
 4d0:	85 b7       	in	r24, 0x35	; 53
 4d2:	8f 7b       	andi	r24, 0xBF	; 191
 4d4:	85 bf       	out	0x35, r24	; 53
			return EXTI_OK;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
			break;
		}
		return EXTI_SENSEError;
		break;
	}
	return EXTI_SENSEError;
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	08 95       	ret
			SET_BIT(MCUCR_Register,ISC00);
			SET_BIT(MCUCR_Register,ISC01);
			return EXTI_OK;
			break;
		}
		return EXTI_SENSEError;
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	08 95       	ret
			SET_BIT(MCUCR_Register,ISC10);
			SET_BIT(MCUCR_Register,ISC11);
			return EXTI_OK;
			break;
		}
		return EXTI_SENSEError;
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	08 95       	ret
			case FALLING:
			CLR_BIT(MCUCR_Register,ISC2);
			return EXTI_OK;
			break;
		}
		return EXTI_SENSEError;
 4e6:	83 e0       	ldi	r24, 0x03	; 3
		break;
	}
	return EXTI_SENSEError;
}
 4e8:	08 95       	ret

000004ea <EXTI_INIT>:
void (*EXTI2_CallBack)(void) = NULL;



u8 EXTI_INIT(u8 INTN_COPY,u8 MODE_COPY)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	c8 2f       	mov	r28, r24
 4f0:	d6 2f       	mov	r29, r22
	GInterrupt_Enable();
 4f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <GInterrupt_Enable>
	switch (INTN_COPY)
 4f6:	c6 30       	cpi	r28, 0x06	; 6
 4f8:	39 f0       	breq	.+14     	; 0x508 <EXTI_INIT+0x1e>
 4fa:	c7 30       	cpi	r28, 0x07	; 7
 4fc:	09 f4       	brne	.+2      	; 0x500 <EXTI_INIT+0x16>
 4fe:	49 c0       	rjmp	.+146    	; 0x592 <EXTI_INIT+0xa8>
 500:	c5 30       	cpi	r28, 0x05	; 5
 502:	09 f0       	breq	.+2      	; 0x506 <EXTI_INIT+0x1c>
 504:	b1 c0       	rjmp	.+354    	; 0x668 <EXTI_INIT+0x17e>
 506:	8a c0       	rjmp	.+276    	; 0x61c <EXTI_INIT+0x132>
	{
		case INT0:
		DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	62 e0       	ldi	r22, 0x02	; 2
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
		switch (MODE_COPY)
 512:	d1 30       	cpi	r29, 0x01	; 1
 514:	11 f1       	breq	.+68     	; 0x55a <EXTI_INIT+0x70>
 516:	78 f1       	brcs	.+94     	; 0x576 <EXTI_INIT+0x8c>
 518:	d2 30       	cpi	r29, 0x02	; 2
 51a:	19 f0       	breq	.+6      	; 0x522 <EXTI_INIT+0x38>
 51c:	d4 30       	cpi	r29, 0x04	; 4
 51e:	79 f0       	breq	.+30     	; 0x53e <EXTI_INIT+0x54>
 520:	a5 c0       	rjmp	.+330    	; 0x66c <EXTI_INIT+0x182>
		{
			case RISING:
			DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,RISING);
 52c:	62 e0       	ldi	r22, 0x02	; 2
 52e:	8c 2f       	mov	r24, r28
 530:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 534:	8c 2f       	mov	r24, r28
 536:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	9c c0       	rjmp	.+312    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case FALLING:
			DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	62 e0       	ldi	r22, 0x02	; 2
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,FALLING);
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	8c 2f       	mov	r24, r28
 54c:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 550:	8c 2f       	mov	r24, r28
 552:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	8e c0       	rjmp	.+284    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case CHANGE:
			DIO_SetPinValue(PORTD,PIN2,PIN_LOW);
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,CHANGE);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	8c 2f       	mov	r24, r28
 568:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 56c:	8c 2f       	mov	r24, r28
 56e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	80 c0       	rjmp	.+256    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case LOW:
			DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,FALLING);
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	8c 2f       	mov	r24, r28
 584:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 588:	8c 2f       	mov	r24, r28
 58a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	72 c0       	rjmp	.+228    	; 0x676 <EXTI_INIT+0x18c>
			break;
		}
		return EXTI_INIT_Error;
		break;
		case INT1:
		DIO_SetPinDirection(PORTD,PIN3,PIN_INPUT);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	63 e0       	ldi	r22, 0x03	; 3
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
		switch (MODE_COPY)
 59c:	d1 30       	cpi	r29, 0x01	; 1
 59e:	11 f1       	breq	.+68     	; 0x5e4 <EXTI_INIT+0xfa>
 5a0:	78 f1       	brcs	.+94     	; 0x600 <EXTI_INIT+0x116>
 5a2:	d2 30       	cpi	r29, 0x02	; 2
 5a4:	19 f0       	breq	.+6      	; 0x5ac <EXTI_INIT+0xc2>
 5a6:	d4 30       	cpi	r29, 0x04	; 4
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <EXTI_INIT+0xde>
 5aa:	62 c0       	rjmp	.+196    	; 0x670 <EXTI_INIT+0x186>
		{
			case RISING:
			DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,RISING);
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	8c 2f       	mov	r24, r28
 5ba:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 5be:	8c 2f       	mov	r24, r28
 5c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	57 c0       	rjmp	.+174    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case FALLING:
			DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,FALLING);
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	8c 2f       	mov	r24, r28
 5d6:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 5da:	8c 2f       	mov	r24, r28
 5dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	49 c0       	rjmp	.+146    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case CHANGE:
			DIO_SetPinValue(PORTD,PIN3,PIN_LOW);
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,CHANGE);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	8c 2f       	mov	r24, r28
 5f2:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 5f6:	8c 2f       	mov	r24, r28
 5f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	3b c0       	rjmp	.+118    	; 0x676 <EXTI_INIT+0x18c>
			break;
			case LOW:
			DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,FALLING);
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	8c 2f       	mov	r24, r28
 60e:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 612:	8c 2f       	mov	r24, r28
 614:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	2d c0       	rjmp	.+90     	; 0x676 <EXTI_INIT+0x18c>
			break;
		}
		return EXTI_INIT_Error;
		break;
		case INT2:
		DIO_SetPinDirection(PORTB,PIN2,PIN_INPUT);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
		switch (MODE_COPY)
 626:	d2 30       	cpi	r29, 0x02	; 2
 628:	19 f0       	breq	.+6      	; 0x630 <EXTI_INIT+0x146>
 62a:	d4 30       	cpi	r29, 0x04	; 4
 62c:	79 f0       	breq	.+30     	; 0x64c <EXTI_INIT+0x162>
 62e:	22 c0       	rjmp	.+68     	; 0x674 <EXTI_INIT+0x18a>
		{
			case RISING:
			DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,RISING);
 63a:	62 e0       	ldi	r22, 0x02	; 2
 63c:	8c 2f       	mov	r24, r28
 63e:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 642:	8c 2f       	mov	r24, r28
 644:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	15 c0       	rjmp	.+42     	; 0x676 <EXTI_INIT+0x18c>
			break;
			case FALLING:
			DIO_SetPinValue(PORTD,PIN3,PIN_HIGH);
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	63 e0       	ldi	r22, 0x03	; 3
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
			EXTI_SENSE(INTN_COPY,FALLING);
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	8c 2f       	mov	r24, r28
 65a:	0e 94 06 02 	call	0x40c	; 0x40c <EXTI_SENSE>
			EXTI_Enable(INTN_COPY);
 65e:	8c 2f       	mov	r24, r28
 660:	0e 94 ee 01 	call	0x3dc	; 0x3dc <EXTI_Enable>
			return EXTI_OK;
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	07 c0       	rjmp	.+14     	; 0x676 <EXTI_INIT+0x18c>
			break;
		}
		return EXTI_INIT_Error;
		break;
	}
	return EXTI_INIT_Error;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	05 c0       	rjmp	.+10     	; 0x676 <EXTI_INIT+0x18c>
			EXTI_SENSE(INTN_COPY,FALLING);
			EXTI_Enable(INTN_COPY);
			return EXTI_OK;
			break;
		}
		return EXTI_INIT_Error;
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	03 c0       	rjmp	.+6      	; 0x676 <EXTI_INIT+0x18c>
			EXTI_SENSE(INTN_COPY,FALLING);
			EXTI_Enable(INTN_COPY);
			return EXTI_OK;
			break;
		}
		return EXTI_INIT_Error;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	01 c0       	rjmp	.+2      	; 0x676 <EXTI_INIT+0x18c>
			EXTI_SENSE(INTN_COPY,FALLING);
			EXTI_Enable(INTN_COPY);
			return EXTI_OK;
			break;
		}
		return EXTI_INIT_Error;
 674:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return EXTI_INIT_Error;
}
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <EXTI0_SetCallBack>:
	}
	return EXTI_SENSEError;
}
u8 EXTI0_SetCallBack(void (*ptr)(void))
{
	EXTI0_CallBack = ptr;
 67c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <EXTI0_CallBack+0x1>
 680:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <EXTI0_CallBack>
	if (EXTI0_CallBack == NULL)
 684:	89 2b       	or	r24, r25
 686:	11 f4       	brne	.+4      	; 0x68c <EXTI0_SetCallBack+0x10>
	{
		return EXTI0_SetCallBackError;
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	08 95       	ret
	}
	return EXTI_OK;
 68c:	80 e0       	ldi	r24, 0x00	; 0
}
 68e:	08 95       	ret

00000690 <__vector_1>:

void __vector_1(void)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	EXTI0_CallBack();
 6b2:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <EXTI0_CallBack>
 6b6:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <EXTI0_CallBack+0x1>
 6ba:	09 95       	icall
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	bf 91       	pop	r27
 6c2:	af 91       	pop	r26
 6c4:	9f 91       	pop	r25
 6c6:	8f 91       	pop	r24
 6c8:	7f 91       	pop	r23
 6ca:	6f 91       	pop	r22
 6cc:	5f 91       	pop	r21
 6ce:	4f 91       	pop	r20
 6d0:	3f 91       	pop	r19
 6d2:	2f 91       	pop	r18
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <__vector_2>:
void __vector_2 (void)
{
 6de:	1f 92       	push	r1
 6e0:	0f 92       	push	r0
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	0f 92       	push	r0
 6e6:	11 24       	eor	r1, r1
	EXTI1_CallBack;
}
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__vector_3>:
void __vector_3 (void)
{
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
	EXTI2_CallBack;
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <Time_Init>:


u8 Time_Init(void)
{
	//Normal Mode No Prescaller
	SET_BIT(TCCR0,0);
 706:	83 b7       	in	r24, 0x33	; 51
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	83 bf       	out	0x33, r24	; 51
	//Start From 0
	//Enable OverFlow
	SET_BIT(TIMSK,0);
 70c:	89 b7       	in	r24, 0x39	; 57
 70e:	81 60       	ori	r24, 0x01	; 1
 710:	89 bf       	out	0x39, r24	; 57
	return Time_OK;
}
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret

00000716 <__vector_11>:

void __vector_11(void)
{
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	11 24       	eor	r1, r1
 720:	2f 93       	push	r18
 722:	3f 93       	push	r19
 724:	4f 93       	push	r20
 726:	5f 93       	push	r21
 728:	6f 93       	push	r22
 72a:	7f 93       	push	r23
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
	Time_int();
 738:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Time_int>
 73c:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Time_int+0x1>
 740:	09 95       	icall
}
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	bf 91       	pop	r27
 748:	af 91       	pop	r26
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	7f 91       	pop	r23
 750:	6f 91       	pop	r22
 752:	5f 91       	pop	r21
 754:	4f 91       	pop	r20
 756:	3f 91       	pop	r19
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <SetTime>:

u8 SetTime(void (*ptr)(void))
{
	Time_int = ptr;
 764:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Time_int+0x1>
 768:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Time_int>
	if (Time_int == NULL)
 76c:	89 2b       	or	r24, r25
 76e:	11 f4       	brne	.+4      	; 0x774 <SetTime+0x10>
	{
		return Time_SetTimeError;
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	08 95       	ret
	}
	return Time_OK;
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	08 95       	ret

00000778 <Bottom_Init>:



u8 Bottom_Init(void)
{
	DIO_SetPinDirection(PORTD,PIN2,PIN_INPUT);
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	62 e0       	ldi	r22, 0x02	; 2
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	DIO_SetPinValue(PORTD,PIN2,PIN_HIGH);
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	83 e0       	ldi	r24, 0x03	; 3
 788:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return Bottom_OK;
}
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	08 95       	ret

00000790 <PED_Init>:
#include "Pedstairs_Interface.h"


u8 PED_Init(void)
{
	DIO_SetPinDirection(Pedstairs,Red,PIN_OUTPUT);
 790:	41 e0       	ldi	r20, 0x01	; 1
 792:	62 e0       	ldi	r22, 0x02	; 2
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	DIO_SetPinDirection(Pedstairs,Yellow,PIN_OUTPUT);
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	DIO_SetPinDirection(Pedstairs,Green,PIN_OUTPUT);
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	return PED_OK;
}
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <PED_CrossMode>:
u8 PED_CrossMode(void)
{
	DIO_SetPinValue(Pedstairs,Yellow,PIN_LOW);
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Red,PIN_LOW);
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	62 e0       	ldi	r22, 0x02	; 2
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Green,PIN_HIGH);
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return PED_OK;
}
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	08 95       	ret

000007d4 <PED_TransientMode>:
u8 PED_TransientMode(u8 H)
{
 7d4:	cf 93       	push	r28
 7d6:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(Pedstairs,Green,PIN_LOW);
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Red,PIN_LOW);
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	62 e0       	ldi	r22, 0x02	; 2
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Yellow,H);
 7ec:	4c 2f       	mov	r20, r28
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return PED_OK;
}
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <PED_StopMode>:
u8 PED_StopMode(void)
{
	DIO_SetPinValue(Pedstairs,Yellow,PIN_LOW);
 7fc:	40 e0       	ldi	r20, 0x00	; 0
 7fe:	61 e0       	ldi	r22, 0x01	; 1
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Green,PIN_LOW);
 806:	40 e0       	ldi	r20, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Pedstairs,Red,PIN_HIGH);
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	62 e0       	ldi	r22, 0x02	; 2
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return PED_OK;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret

0000081e <TRAF_Init>:
#include "Traffic_Interface.h"


u8 TRAF_Init(void)
{
	DIO_SetPinDirection(Traffic,Red,PIN_OUTPUT);
 81e:	41 e0       	ldi	r20, 0x01	; 1
 820:	62 e0       	ldi	r22, 0x02	; 2
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	DIO_SetPinDirection(Traffic,Yellow,PIN_OUTPUT);
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	DIO_SetPinDirection(Traffic,Green,PIN_OUTPUT);
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
	return TRAF_OK;
}
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 95       	ret

00000840 <TRAF_CrossMode>:
u8 TRAF_CrossMode(void)
{
	DIO_SetPinValue(Traffic,Yellow,PIN_LOW);
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	61 e0       	ldi	r22, 0x01	; 1
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Red,PIN_LOW);
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	62 e0       	ldi	r22, 0x02	; 2
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Green,PIN_HIGH);
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return TRAF_OK;
}
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret

00000862 <TRAF_TransientMode>:
u8 TRAF_TransientMode(u8 H)
{
 862:	cf 93       	push	r28
 864:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(Traffic,Green,PIN_LOW);
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Red,PIN_LOW);
 870:	40 e0       	ldi	r20, 0x00	; 0
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Yellow,H);
 87a:	4c 2f       	mov	r20, r28
 87c:	61 e0       	ldi	r22, 0x01	; 1
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return TRAF_OK;
}
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	cf 91       	pop	r28
 888:	08 95       	ret

0000088a <TRAF_StopMode>:
u8 TRAF_StopMode(void)
{
	DIO_SetPinValue(Traffic,Yellow,PIN_LOW);
 88a:	40 e0       	ldi	r20, 0x00	; 0
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Green,PIN_LOW);
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	DIO_SetPinValue(Traffic,Red,PIN_HIGH);
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	62 e0       	ldi	r22, 0x02	; 2
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_SetPinValue>
	return TRAF_OK;
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	08 95       	ret

000008ac <_exit>:
 8ac:	f8 94       	cli

000008ae <__stop_program>:
 8ae:	ff cf       	rjmp	.-2      	; 0x8ae <__stop_program>
